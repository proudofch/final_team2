<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    					http://www.springframework.org/schema/beans/spring-beans.xsd 
    					http://www.springframework.org/schema/security 
    					http://www.springframework.org/schema/security/spring-security.xsd">
	<!--  
1단계
인증과 권한 기본설정(in-memory)방식으로 사용자 만들고 권한 설정하기
auto-config="true" 당신이 제공 하는 설정(화면 (로그인) 과 Controller 사용) 
-> 3.x.x => access => ROLE_USER
-> 4.x.x => access => hasRole("ROLE_USER")
	<security:http auto-config="true">
		<security:csrf disabled="true" />
		<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/customer/noticeReg.htm"    access="hasRole('ROLE_ADMIN')" />
	</security:http>
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="kglim" password="1004"  authorities="ROLE_USER"/>
				<security:user name="admin" password="1004"  authorities="ROLE_ADMIN,ROLE_USER"  />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
-->
<!--  
2단계
1단계 >> 로그인 자동화 처리 >> /login    >> (controller > id, pwd > 인증 , 권한 확인  > session ...)
                     >> /logout   >> 직접처리                   
http://localhost:8090/SpringMVC_Basic03_Sts_Mybatis_Security/login?error
>>form-login 속성 정의하기
login-page : login form 페이지 URL
username-parameter : form id의 name 속성값  (email >> id)
password-parameter : form pw의 name 속성값
login-processing-url : form action 값 (security를 이용해 인증처리)
default-target-url : 로그인 성공 시 이동 URL
authentication-failure-url : 로그인 실패 시 이동 URL
always-use-default-target : true 로 하면 무조건 default-target-url 로 이동한다.
                            false 로 하면 authentication-success-handler 대로 redirect 된다.
authentication-success-handler-ref : 로그인 성공 시 프로세스 정의, bean id 입력
만약 최종 로그인일시를 DB에 기록해야한다면 handler로 처리하는게 좋겠다.
res.sendRedirect 등으로 처리
authentication-failure-handler-ref : 로그인 실패 시 프로세스 정의, bean id 입력
>> security:logout
logout-url : 로그아웃 처리할 URL (security가 알아서 만들기 때문에, 이 경로로 요청만 하면된다)
logout-success-url : 로그아웃 성공 시 이동 URL
success-handler-ref : 로그아웃 성공 시 프로세스 정의, bean id 입력
invalidate-session : 로그아웃 시 세션 삭제여부
>>session-management
invalid-session-url : invalid session(세션 타임아웃 등) 일 때 이동 URL
max-sessions : 최대 허용 가능한 세션 수
expired-url : 중복 로그인 발생시 이동 URL (처음 접속한 세션이 invalidate가 되고 다음 요청시 invalid-session-url로 이동)
error-if-maximum-exceeded : max-sessions을 넘었을때 접속한 세션을 실패처리할지 여부 (expired-url와 얘중에 하나만 쓰면 될듯)
	<security:http>
		<security:csrf disabled="true" />
		<security:form-login login-page="/joinus/login.htm"
		                     authentication-failure-url="/joinus/login.htm?error" />
		<security:logout  logout-success-url="/index.htm" />
		<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/customer/noticeReg.htm"    access="hasRole('ROLE_ADMIN')" />                     
	</security:http>
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="kglim" password="1004"  authorities="ROLE_USER"/>
				<security:user name="admin" password="1004"  authorities="ROLE_ADMIN,ROLE_USER"  />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
-->	
	<security:http>
		<security:csrf disabled="true" />
		<security:form-login default-target-url="/"
							 username-parameter="userid"
							 password-parameter="pwd"
		                     login-page="/login/login.bit"
		                     authentication-failure-url="/login/login.bit?error"
    						 authentication-success-handler-ref="loginSuccessHandler"
		/>
		<security:logout  logout-success-url="/"
						  invalidate-session="true" />
	  
	<!-- 	<security:intercept-url pattern="/blog/**" access="hasRole('ROLE_USER')" /> -->
		<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/**" access="permitAll"/>
		<!-- 세션 관련 설정 -->
        <security:session-management>
        	<security:concurrency-control max-sessions="1"
        	                         expired-url="/login"
        	 />
        </security:session-management>
	</security:http>
	
	 <security:authentication-manager>
		<security:authentication-provider>
			<security:jdbc-user-service 
			data-source-ref="driverManagerDataSource"
			users-by-username-query="select userid as username, pwd as password, enabled from USER where userid=?"
			authorities-by-username-query="select u.userid as username, r.rolename
										   from USERROLE u join ROLES r 
										   on u.roleid = r.roleid 
										   where u.userid=?"	
			 />
		
			<security:password-encoder ref="bCryptPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>
	
<!-- 	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="a@aa.aa" password="1004" authorities="ROLE_ADMIN"/>
				<security:user name="admin" password="1004" authorities="ROLE_ADMIN, ROLE_MEMBER"/>
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>  -->
	
	<!-- 로그인 성공 후 작업 처리 클래스 -->
	<bean id="loginSuccessHandler" class="bit.or.eesotto.security.LoginSuccessHandler">
        <property name="sqlSession" ref="sqlSession"></property>
    	<property name="defaultUrl" value="/main.bit"/>
	</bean>

</beans>